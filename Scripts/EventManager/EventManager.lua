---
--- Generated by GO
--- Created by chenyunxiong
--- DateTime: 2019/1/5 11:42
---
--- 单个模块可使用EventManager.lua 也可以使用EventsForSingleModule.lua
---
--- EventManager.lua: 用于事件的注册、分发, 为全局方法 (Global)
--- 注册分为带tag与普通注册, tag为事件自定义分类
--- 格式为:
--- events: {
---      ["name"], {func, func, func};
---      ["name"], {func, func, func}
---}
--- 在events外面又裹了一层tag, 用来区分不同页面或者类型的调用, 感觉全堆一块很难看
--- eventsWithTag:{
---     ['tag'], {
---         ["name"], {func, func, func};
---         ["name"], {func, func, func}
---     };
---     ['tag'], {
---         ["name"], {func, func, func};
---         ["name"], {func, func, func}
---     }
---}
---

EventManager = {}

local events = {}
local eventsWithTag = {}

local function CheckContainFunc(list, func)
    for i, v in pairs(list) do
        if v == func then
            return i
        end
    end
    return false
end

local function CheckName(name)
    if not name then
        print("Attempt To Add An Event With Nil Name !")
        return false
    elseif type(name) ~= "string" then
        print("Attempt To Add An Event With  !")
        return false
    end
    return true
end

local function CheckTab(tag)
    if not tag then
        print("Attempt To Add An Event With Nil Tag !")
        return false
    elseif type(tag) ~= "string" then
        print("Attempt To Add An Event With Illegal Tag !")
        return false
    elseif not eventsWithTag[tag] then
        print("UnRegist Tag")
        return false
    end
    return true
end

local function CheckEvent(func)
    if not func then
        print("Attempt To Add An Event With Nil Event!")
        return false
    elseif type(func) ~= "function" then
        print("Attempt To Add An Event With Illegal Event!")
        return false
    end
    return true
end

local function AddListener(list, name, func)
    if list[tostring(name)] == nil then
        list[tostring(name)] = {}
        table.insert(list[tostring(name)], func)
    else
        local eventList = list[tostring(name)]
        if not CheckContainFunc(eventList, func) then
            table.insert(eventList, func)
        else
            print(string.format("Events Contains A Same Key %s", name))
        end
    end
end

local function AddListenerWithTag(tag, name, func)
    if eventsWithTag[tostring(tag)] then
        local tagEvents = eventsWithTag[tostring(tag)]
        AddListener(tagEvents, name, func)
    else
        eventsWithTag[tostring(tag)] = {} -- add a new tag to keep events
        AddListener(eventsWithTag[tostring(tag)], name, func)
    end
end

local function RemoveListener(list, name, func)
    if list ~= nil then
        local eventList = list[tostring(name)]
        local index = CheckContainFunc(eventList, func)
        if index then
            print("Remove " .. name .. " Succeed !")
            table.remove(eventList, index)
        else
            print("Attempt To Remove A UnRegister Event: " .. name)
        end
    end
end

local function RemoveListenerWithTag(tag, name, func)
    local tmpEventTag = eventsWithTag[tostring(tag)]
    if tmpEventTag then
        RemoveListener(tmpEventTag, name, func)
    end
end

local function ClearListener(name)
    if events[tostring(name)] ~= nil then
        events[tostring(name)] = nil
    end
end

local function DispatchListener(list, name, ...)
    if list[tostring(name)] ~= nil then
        local events = list[tostring(name)]
        for i, v in pairs(events) do
            if v ~= nil then
                v(...)
            end
        end
    else
        print(string.format("event is not registed %s", name))
    end
end

local function DispatchListenerByTag(tag, name, ...)
    local eventsList = eventsWithTag[tostring(tag)]
    DispatchListener(eventsList, name, ...)
end

local function Clear(list)
    for i, v in pairs(list) do
        EventManager.ClearByName(i)
    end
end

function EventManager.Add(name, func)
    if not CheckName(name) or not CheckEvent(func) then
        return
    end

    AddListener(events, name, func)
end

function EventManager.AddWithTag(tag, name, func)
    AddListenerWithTag(tag, name, func)
end

function EventManager.Remove(name, func)
    if not CheckName(name) or not CheckEvent(func) then
        return
    end

    RemoveListener(events, name, func)
end

function EventManager.ClearByName(name)
    ClearListener(name)
end

function EventManager.ClearByTag(tag)
    if CheckTab(tag) then
        return
    end

    local eventsList = eventsWithTag[tag]
    Clear(eventsList)
end

function EventManager.ClearAll()
    for i, v in pairs(eventsWithTag) do
        EventManager.ClearByTag(i)
    end
    for i, v in pairs(events) do
        Clear(v)
    end
end

function EventManager.Dispatch(name, ...)
    if not CheckName(name) then
        return
    end

    DispatchListener(events, name, ...)
end

function EventManager.DispatchByTag(tag, name, ...)
    if not CheckName(name) or not CheckTab(tag) then
        return
    end
    DispatchListenerByTag(tag, name, ...)
end